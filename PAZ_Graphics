#ifndef PAZ_GRAPHICS
#define PAZ_GRAPHICS

#include <string>
#include <vector>
#include <array>
#include <memory>
#include <stdexcept>

namespace paz
{
    template<typename T>
    using require_iterable = std::enable_if_t<std::is_same<decltype(std::begin(
        std::declval<const T&>())), decltype(std::end(std::declval<const
        T&>()))>::value>;

#ifndef PAZ_IO
    enum class ImageFormat
    {
        R8UInt, R8SInt, R8UNorm, R8SNorm, R16UInt, R16SInt, R16UNorm, R16SNorm,
        R16Float, R32UInt, R32SInt, R32Float, RG8UInt, RG8SInt, RG8UNorm,
        RG8SNorm, RG16UInt, RG16SInt, RG16UNorm, RG16SNorm, RG16Float, RG32UInt,
        RG32SInt, RG32Float, RGBA8UInt, RGBA8SInt, RGBA8UNorm, RGBA8UNorm_sRGB,
        RGBA8SNorm, RGBA16UInt, RGBA16SInt, RGBA16UNorm, RGBA16SNorm,
        RGBA16Float, RGBA32UInt, RGBA32SInt, RGBA32Float
    };

    class Image
    {
        std::vector<unsigned char> _data;
        ImageFormat _format;
        int _rows = 0;
        int _cols = 0;

    public:
        Image() = default;
        Image(ImageFormat format, int width, int height) : _format(format),
            _rows(height), _cols(width)
        {
            int c, b;
            switch(_format)
            {
                case ImageFormat::R8UInt:          c = 1; b = 1; break;
                case ImageFormat::R8SInt:          c = 1; b = 1; break;
                case ImageFormat::R8UNorm:         c = 1; b = 1; break;
                case ImageFormat::R8SNorm:         c = 1; b = 1; break;
                case ImageFormat::R16UInt:         c = 1; b = 2; break;
                case ImageFormat::R16SInt:         c = 1; b = 2; break;
                case ImageFormat::R16UNorm:        c = 1; b = 2; break;
                case ImageFormat::R16SNorm:        c = 1; b = 2; break;
                case ImageFormat::R16Float:        c = 1; b = 2; break;
                case ImageFormat::R32UInt:         c = 1; b = 4; break;
                case ImageFormat::R32SInt:         c = 1; b = 4; break;
                case ImageFormat::R32Float:        c = 1; b = 4; break;
                case ImageFormat::RG8UInt:         c = 2; b = 1; break;
                case ImageFormat::RG8SInt:         c = 2; b = 1; break;
                case ImageFormat::RG8UNorm:        c = 2; b = 1; break;
                case ImageFormat::RG8SNorm:        c = 2; b = 1; break;
                case ImageFormat::RG16UInt:        c = 2; b = 2; break;
                case ImageFormat::RG16SInt:        c = 2; b = 2; break;
                case ImageFormat::RG16UNorm:       c = 2; b = 2; break;
                case ImageFormat::RG16SNorm:       c = 2; b = 2; break;
                case ImageFormat::RG16Float:       c = 2; b = 2; break;
                case ImageFormat::RG32UInt:        c = 2; b = 4; break;
                case ImageFormat::RG32SInt:        c = 2; b = 4; break;
                case ImageFormat::RG32Float:       c = 2; b = 4; break;
                case ImageFormat::RGBA8UInt:       c = 4; b = 1; break;
                case ImageFormat::RGBA8SInt:       c = 4; b = 1; break;
                case ImageFormat::RGBA8UNorm:      c = 4; b = 1; break;
                case ImageFormat::RGBA8UNorm_sRGB: c = 4; b = 1; break;
                case ImageFormat::RGBA8SNorm:      c = 4; b = 1; break;
                case ImageFormat::RGBA16UInt:      c = 4; b = 2; break;
                case ImageFormat::RGBA16SInt:      c = 4; b = 2; break;
                case ImageFormat::RGBA16UNorm:     c = 4; b = 2; break;
                case ImageFormat::RGBA16SNorm:     c = 4; b = 2; break;
                case ImageFormat::RGBA16Float:     c = 4; b = 2; break;
                case ImageFormat::RGBA32UInt:      c = 4; b = 4; break;
                case ImageFormat::RGBA32SInt:      c = 4; b = 4; break;
                case ImageFormat::RGBA32Float:     c = 4; b = 4; break;
                default: throw std::logic_error("Unrecognized image format.");
            }
            _data.resize(static_cast<std::size_t>(width)*height*c*b);
        }
        Image(ImageFormat format, int width, int height, const void* data) :
            Image(format, width, height)
        {
            std::copy(reinterpret_cast<const unsigned char*>(data),
                reinterpret_cast<const unsigned char*>(data) + _data.size(),
                _data.begin());
        }

        std::vector<unsigned char>& bytes()
        {
            return _data;
        }

        const std::vector<unsigned char>& bytes() const
        {
            return _data;
        }

        int width() const
        {
            return _cols;
        }

        int height() const
        {
            return _rows;
        }

        ImageFormat format() const
        {
            return _format;
        }
    };
#endif

    enum class TextureFormat
    {
        R8UInt, R8SInt, R8UNorm, R8SNorm, R16UInt, R16SInt, R16UNorm, R16SNorm,
        R16Float, R32UInt, R32SInt, R32Float, RG8UInt, RG8SInt, RG8UNorm,
        RG8SNorm, RG16UInt, RG16SInt, RG16UNorm, RG16SNorm, RG16Float, RG32UInt,
        RG32SInt, RG32Float, RGBA8UInt, RGBA8SInt, RGBA8UNorm, RGBA8UNorm_sRGB,
        RGBA8SNorm, RGBA16UInt, RGBA16SInt, RGBA16UNorm, RGBA16SNorm,
        RGBA16Float, RGBA32UInt, RGBA32SInt, RGBA32Float, Depth16UNorm,
        Depth32Float, BGRA8UNorm
    };

    enum class DataType
    {
        SInt, UInt, Float
    };

    enum class MinMagFilter
    {
        Linear, Nearest
    };

    enum class MipmapFilter
    {
        Linear, Nearest, None
    };

    enum class WrapMode
    {
        Repeat, MirrorRepeat, ClampToEdge, ClampToZero
    };

    enum class DepthTestMode
    {
        NeverNoMask, LessNoMask, EqualNoMask, LessEqualNoMask, GreaterNoMask,
        NotEqualNoMask, GreaterEqualNoMask, AlwaysNoMask, Never, Less, Equal,
        LessEqual, Greater, NotEqual, GreaterEqual, Always, Disable
    };

    enum class BlendMode
    {
        One_One, One_InvSrcAlpha, SrcAlpha_InvSrcAlpha, InvSrcAlpha_SrcAlpha,
        Zero_InvSrcAlpha, Disable
    };

    enum class LoadAction
    {
        Clear, FillOnes, FillZeros, Load, DontCare
    };

    enum class CullMode
    {
        Front, Back, Disable
    };

    enum class PrimitiveType
    {
        Points, Lines, LineStrip, Triangles, TriangleStrip
    };

    enum class CursorMode
    {
        Normal, Hidden, Disable
    };

    enum class Key : int
    {
        Space, Apostrophe, Comma, Minus, Period, Slash, Zero, One, Two, Three,
        Four, Five, Six, Seven, Eight, Nine, Semicolon, Equal, A, B, C, D, E, F,
        G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, LeftBracket,
        Backslash, RightBracket, Grave, Escape, Enter, Tab, Backspace, Insert,
        Delete, Right, Left, Down, Up, PageUp, PageDown, Home, End, CapsLock,
        F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
        F17, F18, F19, F20, F21, F22, F23, F24, F25, Keypad0, Keypad1, Keypad2,
        Keypad3, Keypad4, Keypad5, Keypad6, Keypad7, Keypad8, Keypad9,
        KeypadDecimal, KeypadDivide, KeypadMultiply, KeypadMinus, KeypadPlus,
        KeypadEnter, KeypadEqual, LeftShift, LeftControl, LeftAlt, LeftSuper,
        RightShift, RightControl, RightAlt, RightSuper, Unknown
    };

    enum class MouseButton : int
    {
        Left, Right, Middle, Back, Forward, Unknown
    };

    // Cross = A, Circle = B, Square = X, Triangle = Y
    enum class GamepadButton : int
    {
        A, B, X, Y, LeftBumper, RightBumper, Back, Start, Guide, LeftThumb,
        RightThumb, Up, Right, Down, Left, Unknown
    };

    static constexpr int NumKeys = static_cast<int>(Key::Unknown);
    static constexpr int NumMouseButtons = static_cast<int>(MouseButton::
        Unknown);
    static constexpr int NumGamepadButtons = static_cast<int>(GamepadButton::
        Unknown);

    class RenderTarget;
    class Texture
    {
        friend class Framebuffer;
        friend class RenderPass;
        friend class Window;
        friend void resize_targets();

    protected:
        struct Data;
        std::shared_ptr<Data> _data;

        Texture(TextureFormat format, int width, int height, MinMagFilter
            minFilter = MinMagFilter::Nearest, MinMagFilter magFilter =
            MinMagFilter::Nearest, MipmapFilter mipFilter = MipmapFilter::None,
            WrapMode wrapS = WrapMode::ClampToEdge, WrapMode wrapT = WrapMode::
            ClampToEdge);

    public:
        Texture();
        Texture(TextureFormat format, int width, int height, const void* data,
            MinMagFilter minFilter = MinMagFilter::Nearest, MinMagFilter
            magFilter = MinMagFilter::Nearest, MipmapFilter mipFilter =
            MipmapFilter::None, WrapMode wrapS = WrapMode::ClampToEdge, WrapMode
            wrapT = WrapMode::ClampToEdge);
        Texture(const Image& image, MinMagFilter minFilter = MinMagFilter::
            Nearest, MinMagFilter magFilter = MinMagFilter::Nearest,
            MipmapFilter mipFilter = MipmapFilter::None, WrapMode wrapS =
            WrapMode::ClampToEdge, WrapMode wrapT = WrapMode::ClampToEdge);
        Texture(RenderTarget&& target);
        int width() const;
        int height() const;
    };

    class RenderTarget : public Texture
    {
    public:
        RenderTarget(TextureFormat format, MinMagFilter minFilter =
            MinMagFilter::Nearest, MinMagFilter magFilter = MinMagFilter::
            Nearest, MipmapFilter mipFilter = MipmapFilter::None, WrapMode wrapS
            = WrapMode::ClampToEdge, WrapMode wrapT = WrapMode::ClampToEdge);
        RenderTarget(TextureFormat format, double scale, MinMagFilter minFilter
            = MinMagFilter::Nearest, MinMagFilter magFilter = MinMagFilter::
            Nearest, MipmapFilter mipFilter = MipmapFilter::None, WrapMode wrapS
            = WrapMode::ClampToEdge, WrapMode wrapT = WrapMode::ClampToEdge);
        RenderTarget(TextureFormat format, int width, int height, MinMagFilter
            minFilter = MinMagFilter::Nearest, MinMagFilter magFilter =
            MinMagFilter::Nearest, MipmapFilter mipFilter = MipmapFilter::None,
            WrapMode wrapS = WrapMode::ClampToEdge, WrapMode wrapT = WrapMode::
            ClampToEdge);
    };

    class VertexBuffer
    {
        friend class RenderPass;

        struct Data;
        std::shared_ptr<Data> _data;

    public:
        VertexBuffer();
        VertexBuffer(std::size_t size);
        void addAttribute(int dim, DataType type);
        void addAttribute(int dim, const float* data, std::size_t size);
        void addAttribute(int dim, const unsigned int* data, std::size_t size);
        void addAttribute(int dim, const int* data, std::size_t size);
        template<typename T, require_iterable<T>* = nullptr>
        void addAttribute(int dim, const T& data)
        {
            addAttribute(dim, &*std::begin(data), std::distance(&*std::begin(
                data), &*std::end(data)));
        }
        void subAttribute(std::size_t idx, const float* data, std::size_t size);
        void subAttribute(std::size_t idx, const unsigned int* data, std::size_t
            size);
        void subAttribute(std::size_t idx, const int* data, std::size_t size);
        template<typename T, require_iterable<T>* = nullptr>
        void subAttribute(int idx, const T& data)
        {
            subAttribute(idx, &*std::begin(data), std::distance(&*std::begin(
                data), &*std::end(data)));
        }
        bool empty() const;
        std::size_t size() const;
    };

    class InstanceBuffer
    {
        friend class RenderPass;

        struct Data;
        std::shared_ptr<Data> _data;

    public:
        InstanceBuffer();
        InstanceBuffer(std::size_t size);
        void addAttribute(int dim, DataType type);
        void addAttribute(int dim, const float* data, std::size_t size);
        void addAttribute(int dim, const unsigned int* data, std::size_t size);
        void addAttribute(int dim, const int* data, std::size_t size);
        template<typename T, require_iterable<T>* = nullptr>
        void addAttribute(int dim, const T& data)
        {
            addAttribute(dim, &*std::begin(data), std::distance(&*std::begin(
                data), &*std::end(data)));
        }
        void subAttribute(std::size_t idx, const float* data, std::size_t size);
        void subAttribute(std::size_t idx, const unsigned int* data, std::size_t
            size);
        void subAttribute(std::size_t idx, const int* data, std::size_t size);
        template<typename T, require_iterable<T>* = nullptr>
        void subAttribute(int idx, const T& data)
        {
            subAttribute(idx, &*std::begin(data), std::distance(&*std::begin(
                data), &*std::end(data)));
        }
        bool empty() const;
        std::size_t size() const;
    };

    class IndexBuffer
    {
        friend class RenderPass;

        struct Data;
        std::shared_ptr<Data> _data;

    public:
        IndexBuffer();
        IndexBuffer(std::size_t size);
        IndexBuffer(const unsigned int* data, std::size_t size);
        template<typename T, require_iterable<T>* = nullptr>
        IndexBuffer(const T& data) : IndexBuffer(&*std::begin(data), std::
            distance(&*std::begin(data), &*std::end(data))) {}
        void sub(const unsigned int* data, std::size_t size);
        template<typename T, require_iterable<T>* = nullptr>
        void sub(const T& data)
        {
            sub(&*std::begin(data), std::distance(&*std::begin(data), &*std::
                end(data)));
        }
        bool empty() const;
        std::size_t size() const;
    };

    class Framebuffer
    {
        friend class RenderPass;

        struct Data;
        std::shared_ptr<Data> _data;

    public:
        Framebuffer();
        void attach(const RenderTarget& target);
        Texture colorAttachment(std::size_t i) const;
        Texture depthStencilAttachment() const;
        int width() const;
        int height() const;
    };

    class VertexFunction
    {
        friend class RenderPass;

        struct Data;
        std::shared_ptr<Data> _data;

    public:
        VertexFunction();
        VertexFunction(const std::string& src);
    };

    class FragmentFunction
    {
        friend class RenderPass;

        struct Data;
        std::shared_ptr<Data> _data;

    public:
        FragmentFunction();
        FragmentFunction(const std::string& src);
    };

    class RenderPass
    {
        struct Data;
        std::shared_ptr<Data> _data;

    public:
        RenderPass();
        RenderPass(const Framebuffer& fbo, const VertexFunction& vert, const
            FragmentFunction& frag, const std::vector<BlendMode>& modes = {});
        RenderPass(const VertexFunction& vert, const FragmentFunction& frag,
            const std::vector<BlendMode>& modes = {});
        void begin(const std::vector<LoadAction>& colorLoadActions = {},
            LoadAction depthLoadAction = LoadAction::DontCare);
        void end();
        void depth(DepthTestMode depthMode);
        void cull(CullMode mode);
        void read(const std::string& name, const Texture& tex);
        void uniform(const std::string& name, int x);
        void uniform(const std::string& name, int x, int y);
        void uniform(const std::string& name, int x, int y, int z);
        void uniform(const std::string& name, int x, int y, int z, int w);
        void uniform(const std::string& name, const int* x, std::size_t size);
        void uniform(const std::string& name, unsigned int x);
        void uniform(const std::string& name, unsigned int x, unsigned int y);
        void uniform(const std::string& name, unsigned int x, unsigned int y,
            unsigned int z);
        void uniform(const std::string& name, unsigned int x, unsigned int y,
            unsigned int z, unsigned int w);
        void uniform(const std::string& name, const unsigned int* x, std::size_t
            size);
        void uniform(const std::string& name, float x);
        void uniform(const std::string& name, float x, float y);
        void uniform(const std::string& name, float x, float y, float z);
        void uniform(const std::string& name, float x, float y, float z, float
            w);
        void uniform(const std::string& name, const float* x, std::size_t size);
        template<typename T, require_iterable<T>* = nullptr>
        void uniform(const std::string& name, const T& data)
        {
            uniform(name, &*std::begin(data), std::distance(&*std::begin(data),
                &*std::end(data)));
        }
        void draw(PrimitiveType type, const VertexBuffer& vertices);
        void draw(PrimitiveType type, const VertexBuffer& vertices, const
            IndexBuffer& indices);
        void draw(PrimitiveType type, const VertexBuffer& vertices, const
            InstanceBuffer& instances);
        void draw(PrimitiveType type, const VertexBuffer& vertices, const
            InstanceBuffer& instances, const IndexBuffer& indices);
        Framebuffer framebuffer() const;
    };

    std::array<float, 16> perspective(float yFov, float ratio, float zNear,
        float zFar);
    std::array<float, 16> ortho(const float left, const float right, const float
        bottom, const float top, const float zNear, const float zFar);
    std::array<float, 16> transform(const std::array<float, 3>& delta, const
        std::array<float, 9>& rot);

    class Window
    {
    public:
        Window() = delete;
        static void MakeFullscreen();
        static void MakeWindowed();
        static void SetTitle(const std::string& title);
        static bool IsKeyWindow();
        static bool IsFullscreen();
        static int ViewportWidth();
        static int ViewportHeight();
        static int Width();
        static int Height();
        static bool KeyDown(Key key);
        static bool KeyPressed(Key key);
        static bool KeyReleased(Key key);
        static bool MouseDown(MouseButton button);
        static bool MousePressed(MouseButton button);
        static bool MouseReleased(MouseButton button);
        static std::pair<double, double> MousePos();
        static std::pair<double, double> ScrollOffset();
        static bool GamepadDown(GamepadButton button);
        static bool GamepadPressed(GamepadButton button);
        static bool GamepadReleased(GamepadButton button);
        static std::pair<double, double> GamepadLeftStick();
        static std::pair<double, double> GamepadRightStick();
        static double GamepadLeftTrigger();
        static double GamepadRightTrigger();
        static bool GamepadActive();
        static bool MouseActive();
        static void SetCursorMode(CursorMode mode);
        static float AspectRatio();
        static void Quit();
        static bool Done();
        static void PollEvents();
        static void EndFrame();
        static double FrameTime();
        static void SetMinSize(int width, int height);
        static void SetMaxSize(int width, int height);
        static void MakeResizable();
        static void MakeNotResizable();
        static void Resize(int width, int height, bool viewportCoords);
        static Image ReadPixels();
        static float DpiScale();
        static float UiScale();
        static void DisableHidpi();
        static void EnableHidpi();
        static bool HidpiEnabled();
        static bool HidpiSupported();
        static void SetGamma(float gamma);
        static void DisableDithering();
        static void EnableDithering();
    };
}

#endif
