#ifndef PAZ_GRAPHICS
#define PAZ_GRAPHICS

#include <iostream>
#include <vector>
#include <array>
#include <functional>
#include <unordered_map>
#include <chrono>
#include <unordered_set>
#include <memory>

namespace paz
{
    class Texture
    {
        friend class Framebuffer;
        friend class RenderPass;

        Texture(const Texture&) = delete;
        Texture& operator=(const Texture&) = delete;

    public:
        enum class MinMagFilter
        {
            Linear,
            Nearest
        };

        enum class MipmapFilter
        {
            Linear,
            Nearest,
            None
        };

        enum class DataType
        {
            Float,
            SInt,
            UInt,
            SNorm,
            UNorm
        };

    protected:
        struct Data;
        std::unique_ptr<Data> _data;

        bool _mipmap = false;

        Texture();
        void init(int width, int height, int numChannels, int numBits, DataType
            type, MinMagFilter minFilter, MinMagFilter magFilter, const void*
            data);

    public:
        virtual ~Texture();
        Texture(int width, int height, int numChannels, int numBits, DataType
            type, MinMagFilter minFilter, MinMagFilter magFilter);
        Texture(int width, int height, int numChannels, int numBits, const std::
            vector<float>& data, MinMagFilter minFilter, MinMagFilter
            magFilter);
        // ...
        Texture(int width, int height, int numChannels, int numBits, const std::
            vector<unsigned int>& data, MinMagFilter minFilter, MinMagFilter
            magFilter); // WHAT ABOUT NORMALIZATION ?
        // ...
        virtual void resize(int width, int height);
    };

    class RenderTarget : public Texture
    {
    protected:
        double _scale;

        RenderTarget(const RenderTarget&) = delete;
        RenderTarget& operator=(const RenderTarget&) = delete;

        RenderTarget();

    public:
        virtual ~RenderTarget();
        void resize(int width, int height) override;
    };

    class ColorTarget : public RenderTarget
    {
        ColorTarget(const ColorTarget&) = delete;
        ColorTarget& operator=(const ColorTarget&) = delete;

    public:
        ColorTarget(double scale, int numChannels, int numBits, DataType type,
            MinMagFilter minFilter, MinMagFilter magFilter);
    };

    class DepthStencilTarget : public RenderTarget
    {
        DepthStencilTarget(const DepthStencilTarget&) = delete;
        DepthStencilTarget& operator=(const DepthStencilTarget&) = delete;

    public:
        DepthStencilTarget(double scale, int numBits, DataType type,
            MinMagFilter minFilter, MinMagFilter magFilter);
    };

    class VertexBuffer
    {
        friend class RenderPass;

        struct Data;
        std::unique_ptr<Data> _data;

        std::size_t _numVertices = 0;

        VertexBuffer(const VertexBuffer&) = delete;
        VertexBuffer& operator=(const VertexBuffer&) = delete;

    public:
        ~VertexBuffer();
        VertexBuffer();
        void attribute(int dim, const std::vector<float>& data);
        void attribute(int dim, const std::vector<unsigned int>& data);
        void attribute(int dim, const std::vector<int>& data);
    };

    class IndexBuffer
    {
        friend class RenderPass;

        struct Data;
        std::unique_ptr<Data> _data;

        std::size_t _numIndices;

        IndexBuffer(const IndexBuffer&) = delete;
        IndexBuffer& operator=(const IndexBuffer&) = delete;

    public:
        ~IndexBuffer();
        IndexBuffer(const std::vector<unsigned int>& indices);
    };

    class Framebuffer
    {
        friend class RenderPass;

        struct Data;
        std::unique_ptr<Data> _data;

        Framebuffer(const Framebuffer&) = delete;
        Framebuffer& operator=(const Framebuffer&) = delete;

    public:
        ~Framebuffer();
        Framebuffer();
        void attach(const ColorTarget& target);
        void attach(const DepthStencilTarget& target);
    };

    class ShaderFunctionLibrary
    {
        friend class Shader;

        struct Data;
        std::unique_ptr<Data> _data;

        ShaderFunctionLibrary(const ShaderFunctionLibrary&) = delete;
        ShaderFunctionLibrary& operator=(const ShaderFunctionLibrary&) = delete;

    public:
        ShaderFunctionLibrary();
        ~ShaderFunctionLibrary();
        void vertex(const std::string& name, const std::string& src);
        void fragment(const std::string& name, const std::string& src);
    };

    class Shader
    {
        friend class RenderPass;

        struct Data;
        std::unique_ptr<Data> _data;

        Shader(const Shader&) = delete;
        Shader& operator=(const Shader&) = delete;

    public:
        ~Shader();
        Shader(const ShaderFunctionLibrary& vertLibrary, const std::string&
            vertName, const ShaderFunctionLibrary& fragLibrary, const std::
            string& fragName);
    };

    class RenderPass
    {
    public:
        enum class DepthTestMode
        {
            Never,
            Less,
            Equal,
            LessEqual,
            Greater,
            NotEqual,
            GreaterEqual,
            Always,
            Disable
        };

        enum class BlendMode
        {
            Additive,
            // ...
            Disable
        };

        enum class LoadAction
        {
            Clear,
            Load,
            DontCare
        };

        enum class CullMode
        {
            Front,
            Back,
            Disable
        };

        enum class DataType
        {
            Float,
            Int,
            UInt
        };

    private:
        struct Data;
        std::unique_ptr<Data> _data;

        const Framebuffer* _fbo = nullptr;

        RenderPass(const RenderPass&) = delete;
        RenderPass& operator=(const RenderPass&) = delete;

    public:
        enum class PrimitiveType
        {
            Points,
            Lines,
            LineStrip,
            Triangles,
            TriangleStrip
        };

        ~RenderPass();
        RenderPass(const Framebuffer& fbo, const Shader& shader);
        RenderPass(const Shader& shader);
        void begin(const std::vector<LoadAction>& colorLoadActions = {},
            LoadAction depthLoadAction = LoadAction::DontCare, BlendMode mode =
            BlendMode::Disable);
        void end();
        void depth(DepthTestMode depthMode);
        void cull(CullMode mode) const;
        void read(const std::string& name, const Texture& tex) const;
        void uniform(const std::string& name, int x) const;
        void uniform(const std::string& name, int x, int y) const;
        void uniform(const std::string& name, int x, int y, int z) const;
        void uniform(const std::string& name, int x, int y, int z, int w) const;
        void uniform(const std::string& name, const int* x, int n) const;
        void uniform(const std::string& name, unsigned int x) const;
        void uniform(const std::string& name, unsigned int x, unsigned int y)
            const;
        void uniform(const std::string& name, unsigned int x, unsigned int y,
            unsigned int z) const;
        void uniform(const std::string& name, unsigned int x, unsigned int y,
            unsigned int z, unsigned int w) const;
        void uniform(const std::string& name, const unsigned int* x, int n)
            const;
        void uniform(const std::string& name, float x) const;
        void uniform(const std::string& name, float x, float y) const;
        void uniform(const std::string& name, float x, float y, float z) const;
        void uniform(const std::string& name, float x, float y, float z, float
            w) const;
        void uniform(const std::string& name, const float* x, int n) const;
        void primitives(PrimitiveType type, const VertexBuffer& vertices, int
            offset = 0) const;
        void indexed(PrimitiveType type, const VertexBuffer& vertices, const
            IndexBuffer& indices, int offset = 0) const;
    };

    std::array<float, 16> perspective(float yFov, float ratio, float zNear,
        float zFar);
    std::array<float, 16> ortho(const float left, const float right, const float
        bottom, const float top, const float zNear, const float zFar);
    std::array<float, 16> transform(const std::array<float, 3>& delta, const
        std::array<float, 9>& rot);

    class Window
    {
        friend class RenderTarget;

        static bool KeyDown(int key);
        static bool KeyPressed(int key);
        static bool KeyReleased(int key);
        static void ResetEvents();
        static void RegisterTarget(RenderTarget* target);
        static void UnregisterTarget(RenderTarget* target);

    public:
        enum class CursorMode
        {
            Normal,
            Hidden,
            Disable
        };

        enum class Key : int
        {
            Space, Apostrophe, Comma, Minus, Period, Slash, Zero, One, Two,
            Three, Four, Five, Six, Seven, Eight, Nine, Semicolon, Equal, A, B,
            C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X,
            Y, Z, LeftBracket, Backslash, RightBracket, Grave, Escape, Enter,
            Tab, Backspace, Insert, Delete, Right, Left, Down, Up, PageUp,
            PageDown, Home, End, CapsLock, F1, F2, F3, F4, F5, F6, F7, F8, F9,
            F10, F11, F12, F13, F14, F15, F16, F17, F18, F19, F20, F21, F22,
            F23, F24, F25, Keypad0, Keypad1, Keypad2, Keypad3, Keypad4, Keypad5,
            Keypad6, Keypad7, Keypad8, Keypad9, KeypadDecimal, KeypadDivide,
            KeypadMultiply, KeypadMinus, KeypadPlus, KeypadEnter, KeypadEqual,
            LeftShift, LeftControl, LeftAlt, LeftSuper, RightShift,
            RightControl, RightAlt, RightSuper, Unknown
        };

        static constexpr int NumKeys = static_cast<int>(Key::Unknown);
        static constexpr int NumMouseButtons = 8;

        Window() = delete;
        static void MakeFullscreen();
        static void MakeWindowed();
        static void SetTitle(const std::string& title);
        static bool IsKeyWindow();
        static bool IsFullscreen();
        static int ViewportWidth();
        static int ViewportHeight();
        static int Width();
        static int Height();
        static bool KeyDown(Key key);
        static bool KeyPressed(Key key);
        static bool KeyReleased(Key key);
        static bool MouseDown(unsigned int button);
        static bool MousePressed(unsigned int button);
        static bool MouseReleased(unsigned int button);
        static std::pair<double, double> MousePos();
        static std::pair<double, double> ScrollOffset();
        static void SetCursorMode(CursorMode mode);
        static float AspectRatio();
        static void Quit();
        static void Loop(const std::function<void(void)>& draw);
        static double FrameTime();
        static void SetMinSize(int width, int height);
        static void SetMaxSize(int width, int height);
        static void Resize(int width, int height);
        static void DrawInRenderer();//TEMP (for internal use on macOS builds)
        static void ResizeTargets();//TEMP (for internal use)
        static std::vector<float> PrintScreen();
    };
}

#endif
