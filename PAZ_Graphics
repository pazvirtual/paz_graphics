#ifndef PAZ_GRAPHICS
#define PAZ_GRAPHICS

#include <iostream>
#include <vector>
#include <array>
#include <memory>

#define PAZ_TEX_IMG_CTOR_T_N(t, n) Texture(const Image<t, n>& image,\
    MinMagFilter minFilter = MinMagFilter::Nearest, MinMagFilter magFilter =\
    MinMagFilter::Nearest, MipmapFilter mipFilter = MipmapFilter::None,\
    WrapMode wrapS = WrapMode::ClampToEdge, WrapMode wrapT = WrapMode::\
    ClampToEdge);
#define PAZ_TEX_IMG_CTOR_T_N_NORM(t, n) Texture(const Image<t, n>& image,\
    MinMagFilter minFilter = MinMagFilter::Nearest, MinMagFilter magFilter =\
    MinMagFilter::Nearest, MipmapFilter mipFilter = MipmapFilter::None,\
    WrapMode wrapS = WrapMode::ClampToEdge, WrapMode wrapT = WrapMode::\
    ClampToEdge, bool normalized = true);
#define PAZ_TEX_IMG_CTOR_T(t) PAZ_TEX_IMG_CTOR_T_N(t, 1) PAZ_TEX_IMG_CTOR_T_N(\
    t, 2) PAZ_TEX_IMG_CTOR_T_N(t, 4)
#define PAZ_TEX_IMG_CTOR_T_NORM(t) PAZ_TEX_IMG_CTOR_T_N_NORM(t, 1) \
    PAZ_TEX_IMG_CTOR_T_N_NORM(t, 2) PAZ_TEX_IMG_CTOR_T_N_NORM(t, 4)

namespace paz
{
    template<typename T>
    using require_iterable = std::enable_if_t<std::is_same<decltype(std::begin(
        std::declval<const T&>())), decltype(std::end(std::declval<const
        T&>()))>::value>;

#ifndef PAZ_IO
    template<typename T, typename U>
    using require_same = std::enable_if_t<std::is_same<T, U>::value>;

    template<typename T, typename U>
    using require_different = std::enable_if_t<!std::is_same<T, U>::value>;

    template<typename T, int NumChannels>
    class Image : public std::vector<T>
    {
        int _rows;

    public:
        Image(int width, int height) : std::vector<T>(width*height*NumChannels),
            _rows(height) {}
        Image(const T* data, int width, int height) : std::vector<T>(data, data
            + width*height*NumChannels), _rows(height) {}
        Image(const std::vector<T>& data, int width, int height) : std::vector<
            T>(data), _rows(height)
        {
            if(data.size() != static_cast<std::size_t>(width*height*
                NumChannels))
            {
                throw std::runtime_error("Image dimensions do not match.");
            }
        }
        template<typename U, require_iterable<U>* = nullptr>
        Image(const U& data, int width, int height) : std::vector<T>(std::begin(
            data), std::end(data)), _rows(height)
        {
            if(data.size() != static_cast<std::size_t>(width*height*
                NumChannels))
            {
                throw std::runtime_error("Image dimensions do not match.");
            }
        }
        template<typename U, require_different<T, U>* = nullptr>
        explicit Image(const Image<U, NumChannels>& img) : std::vector<T>(img.
            begin(), img.end()), _rows(img.height()) {}

        int width() const
        {
            return std::vector<T>::size()/NumChannels/_rows;
        }

        int height() const
        {
            return _rows;
        }
    };
#endif

    enum class TextureFormat
    {
        R8UInt, R8SInt, R8UNorm, R8SNorm, R16UInt, R16SInt, R16UNorm, R16SNorm,
        R16Float, R32UInt, R32SInt, R32Float, RG8UInt, RG8SInt, RG8UNorm,
        RG8SNorm, RG16UInt, RG16SInt, RG16UNorm, RG16SNorm, RG16Float, RG32UInt,
        RG32SInt, RG32Float, RGBA8UInt, RGBA8SInt, RGBA8UNorm, RGBA8SNorm,
        RGBA16UInt, RGBA16SInt, RGBA16UNorm, RGBA16SNorm, RGBA16Float,
        RGBA32UInt, RGBA32SInt, RGBA32Float, Depth16UNorm, Depth32Float
    };

    enum class MinMagFilter
    {
        Linear, Nearest
    };

    enum class MipmapFilter
    {
        Linear, Nearest, None
    };

    enum class WrapMode
    {
        Repeat, MirrorRepeat, ClampToEdge, ClampToZero
    };

    enum class DepthTestMode
    {
        NeverNoMask, LessNoMask, EqualNoMask, LessEqualNoMask, GreaterNoMask,
        NotEqualNoMask, GreaterEqualNoMask, AlwaysNoMask, Never, Less, Equal,
        LessEqual, Greater, NotEqual, GreaterEqual, Always, Disable
    };

    enum class BlendMode
    {
        Additive, Blend, Disable
    };

    enum class LoadAction
    {
        Clear, Load, DontCare
    };

    enum class CullMode
    {
        Front, Back, Disable
    };

    enum class PrimitiveType
    {
        Points, Lines, LineStrip, LineLoop, Triangles, TriangleStrip,
        TriangleFan
    };

    enum class CursorMode
    {
        Normal, Hidden, Disable
    };

    enum class Key : int
    {
        Space, Apostrophe, Comma, Minus, Period, Slash, Zero, One, Two, Three,
        Four, Five, Six, Seven, Eight, Nine, Semicolon, Equal, A, B, C, D, E, F,
        G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, LeftBracket,
        Backslash, RightBracket, Grave, Escape, Enter, Tab, Backspace, Insert,
        Delete, Right, Left, Down, Up, PageUp, PageDown, Home, End, CapsLock,
        F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16,
        F17, F18, F19, F20, F21, F22, F23, F24, F25, Keypad0, Keypad1, Keypad2,
        Keypad3, Keypad4, Keypad5, Keypad6, Keypad7, Keypad8, Keypad9,
        KeypadDecimal, KeypadDivide, KeypadMultiply, KeypadMinus, KeypadPlus,
        KeypadEnter, KeypadEqual, LeftShift, LeftControl, LeftAlt, LeftSuper,
        RightShift, RightControl, RightAlt, RightSuper, Unknown
    };

    static constexpr int NumKeys = static_cast<int>(Key::Unknown);
    static constexpr int NumMouseButtons = 8;

    class Texture
    {
        friend class Framebuffer;
        friend class RenderPass;
        friend void resize_targets();

    protected:
        struct Data;
        std::shared_ptr<Data> _data;

    public:
        Texture();
        Texture(int width, int height, TextureFormat format, MinMagFilter
            minFilter = MinMagFilter::Nearest, MinMagFilter magFilter =
            MinMagFilter::Nearest, MipmapFilter mipFilter = MipmapFilter::None,
            WrapMode wrapS = WrapMode::ClampToEdge, WrapMode wrapT = WrapMode::
            ClampToEdge);
        PAZ_TEX_IMG_CTOR_T_NORM(std::int8_t)
        PAZ_TEX_IMG_CTOR_T_NORM(std::int16_t)
        PAZ_TEX_IMG_CTOR_T(std::int32_t)
        PAZ_TEX_IMG_CTOR_T_NORM(std::uint8_t)
        PAZ_TEX_IMG_CTOR_T_NORM(std::uint16_t)
        PAZ_TEX_IMG_CTOR_T(std::uint32_t)
        PAZ_TEX_IMG_CTOR_T(float)
        int width() const;
        int height() const;
    };

    class RenderTarget : public Texture
    {
    public:
        RenderTarget(double scale, TextureFormat format, MinMagFilter minFilter
            = MinMagFilter::Nearest, MinMagFilter magFilter = MinMagFilter::
            Nearest, MipmapFilter mipFilter = MipmapFilter::None, WrapMode
            wrapS = WrapMode::ClampToEdge, WrapMode wrapT = WrapMode::
            ClampToEdge);
        RenderTarget(int width, int height, TextureFormat format, MinMagFilter
            minFilter = MinMagFilter::Nearest, MinMagFilter magFilter =
            MinMagFilter::Nearest, MipmapFilter mipFilter = MipmapFilter::None,
            WrapMode wrapS = WrapMode::ClampToEdge, WrapMode wrapT = WrapMode::
            ClampToEdge);
    };

    class VertexBuffer
    {
        friend class RenderPass;

        struct Data;
        std::shared_ptr<Data> _data;

    public:
        VertexBuffer();
        void attribute(int dim, const float* data, std::size_t size);
        void attribute(int dim, const unsigned int* data, std::size_t size);
        void attribute(int dim, const int* data, std::size_t size);
        template<typename T, require_iterable<T>* = nullptr>
        void attribute(int dim, const T& data)
        {
            attribute(dim, &*std::begin(data), std::distance(&*std::begin(data),
                &*std::end(data)));
        }
        bool empty() const;
    };

    class IndexBuffer
    {
        friend class RenderPass;

        struct Data;
        std::shared_ptr<Data> _data;

    public:
        IndexBuffer();
        IndexBuffer(const unsigned int* data, std::size_t size);
        IndexBuffer(const std::vector<unsigned int>& data) : IndexBuffer(data.
            data(), data.size()) {}
        template<typename T, require_iterable<T>* = nullptr>
        IndexBuffer(const T& data) : IndexBuffer(&*std::begin(data), std::
            distance(&*std::begin(data), &*std::end(data))) {}
        bool empty() const;
    };

    class Framebuffer
    {
        friend class RenderPass;

        struct Data;
        std::shared_ptr<Data> _data;

    public:
        Framebuffer();
        void attach(const RenderTarget& target);
        Texture colorAttachment(std::size_t i) const;
        Texture depthStencilAttachment() const;
    };

    class VertexFunction
    {
        friend class RenderPass;

        struct Data;
        std::shared_ptr<Data> _data;

    public:
        VertexFunction();
        VertexFunction(const std::string& src);
    };

    class FragmentFunction
    {
        friend class RenderPass;

        struct Data;
        std::shared_ptr<Data> _data;

    public:
        FragmentFunction();
        FragmentFunction(const std::string& src);
    };

    class RenderPass
    {
        struct Data;
        std::shared_ptr<Data> _data;

    public:
        RenderPass();
        RenderPass(const Framebuffer& fbo, const VertexFunction& vert, const
            FragmentFunction& frag, BlendMode mode = BlendMode::Disable);
        RenderPass(const VertexFunction& vert, const FragmentFunction& frag,
            BlendMode mode = BlendMode::Disable);
        void begin(const std::vector<LoadAction>& colorLoadActions = {},
            LoadAction depthLoadAction = LoadAction::DontCare);
        void end();
        void depth(DepthTestMode depthMode);
        void cull(CullMode mode);
        void read(const std::string& name, const Texture& tex);
        void uniform(const std::string& name, int x);
        void uniform(const std::string& name, int x, int y);
        void uniform(const std::string& name, int x, int y, int z);
        void uniform(const std::string& name, int x, int y, int z, int w);
        void uniform(const std::string& name, const int* x, std::size_t size);
        void uniform(const std::string& name, unsigned int x);
        void uniform(const std::string& name, unsigned int x, unsigned int y);
        void uniform(const std::string& name, unsigned int x, unsigned int y,
            unsigned int z);
        void uniform(const std::string& name, unsigned int x, unsigned int y,
            unsigned int z, unsigned int w);
        void uniform(const std::string& name, const unsigned int* x, std::size_t
            size);
        void uniform(const std::string& name, float x);
        void uniform(const std::string& name, float x, float y);
        void uniform(const std::string& name, float x, float y, float z);
        void uniform(const std::string& name, float x, float y, float z, float
            w);
        void uniform(const std::string& name, const float* x, std::size_t size);
        template<typename T, require_iterable<T>* = nullptr>
        void uniform(const std::string& name, const T& data)
        {
            uniform(name, &*std::begin(data), std::distance(&*std::begin(data),
                &*std::end(data)));
        }
        void draw(PrimitiveType type, const VertexBuffer& vertices);
        void draw(PrimitiveType type, const VertexBuffer& vertices, const
            IndexBuffer& indices);
        Framebuffer framebuffer() const;
    };

    std::array<float, 16> perspective(float yFov, float ratio, float zNear,
        float zFar);
    std::array<float, 16> ortho(const float left, const float right, const float
        bottom, const float top, const float zNear, const float zFar);
    std::array<float, 16> transform(const std::array<float, 3>& delta, const
        std::array<float, 9>& rot);

    class Window
    {
    public:
        Window() = delete;
        static void MakeFullscreen();
        static void MakeWindowed();
        static void SetTitle(const std::string& title);
        static bool IsKeyWindow();
        static bool IsFullscreen();
        static int ViewportWidth();
        static int ViewportHeight();
        static int Width();
        static int Height();
        static bool KeyDown(Key key);
        static bool KeyPressed(Key key);
        static bool KeyReleased(Key key);
        static bool MouseDown(int button);
        static bool MousePressed(int button);
        static bool MouseReleased(int button);
        static std::pair<double, double> MousePos();
        static std::pair<double, double> ScrollOffset();
        static void SetCursorMode(CursorMode mode);
        static float AspectRatio();
        static void Quit();
        static bool Done();
        static void EndFrame();
        static double FrameTime();
        static void SetMinSize(int width, int height);
        static void SetMaxSize(int width, int height);
        static void MakeResizable();
        static void MakeNotResizable();
        static void Resize(int width, int height, bool viewportCoords);
        static Image<std::uint8_t, 3> PrintScreen();
    };
}

#endif
